import tensorflow as tf
tf.reset_default_graph()
from CNN_embedder_network import NetType
from ops import *
from Comb_LSTM_interference import CombLSTMInterference
from Comb_LSTM_network import CombLSTMNetwork
from tensorflow.python.tools import inspect_checkpoint as chkp


LOG_PATH = "Export/Log/"
#LOAD_FILE = "CNN_Dense/newest_training/CNN_Dense-47999"
LOAD_FILE = "CNN_Dense/2018_05_21_13-56-27/CNN_Dense-73999"
FREEZE_DIR = "CNN_Dense/freezed/"
INIT_INPUT =   [[264, 0, 113, 9, 1, 3, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [412, 0, 9, 9, 1, 3, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [411, 0, 9, 9, 1, 3, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [264, 0, 271, 0, 9, 1, 9, 1, 3, 113, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [412, 0, 9, 11, 1, 3, 412, 0, 11, 9, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [411, 0, 9, 11, 1, 3, 411, 0, 11, 9, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [412, 0, 9, 411, 0, 9, 11, 1, 1, 3, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [411, 0, 9, 412, 0, 9, 11, 1, 1, 3, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [6, 411, 0, 87, 411, 0, 87, 62, 1, 1, 3, 411, 0, 87, 62, 1, 5, 5, 5, 5, 5, 5, 5],
                [412, 0, 9, 412, 0, 11, 13, 1, 1, 3, 412, 0, 412, 0, 9, 11, 1, 13, 1, 5, 5, 5, 5],
                [411, 0, 9, 411, 0, 11, 13, 1, 1, 3, 411, 0, 411, 0, 9, 11, 1, 13, 1, 5, 5, 5, 5],
                [264, 0, 264, 0, 9, 11, 1, 13, 1, 3, 264, 0, 9, 264, 0, 11, 13, 1, 1, 5, 5, 5, 5],
                [264, 0, 9, 412, 0, 11, 13, 1, 1, 3, 412, 0, 264, 0, 9, 11, 1, 264, 0, 9, 13, 1, 1],
                [264, 0, 9, 411, 0, 11, 13, 1, 1, 3, 411, 0, 264, 0, 9, 11, 1, 264, 0, 9, 13, 1, 1],
                [264, 0, 412, 0, 9, 11, 1, 13, 1, 3, 412, 0, 264, 0, 9, 13, 1, 264, 0, 11, 13, 1, 1],
                [264, 0, 411, 0, 9, 11, 1, 13, 1, 3, 411, 0, 264, 0, 9, 13, 1, 264, 0, 11, 13, 1, 1],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
                [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]
INPUT_CLAUSE_LENGTH = [7, 7, 7, 10, 11, 11, 11, 11, 16, 19, 19, 19, 23, 23, 23, 23, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
INPUT_NEG_CONJ = [[6, 411, 0, 87, 411, 0, 87, 62, 1, 1, 3, 411, 0, 87, 62, 1]]
INPUT_CONJ_LENGTH = [16]
INPUT_INIT_LENGTH = [16]

RESULT_CONJ = [0.160133, -0.463799, 0.554605, 0.311415, -0.417562, -0.029145, -0.280989, 0.318116, -0.107782, 0.089340, -0.547306, 0.492549, -0.279224, 0.150210, 0.019820, 0.271708, 0.588705, 0.004721, -0.094516, 0.255846, 0.866617, 0.264956, -0.143479, 0.183239, -0.117570, -0.079945, -0.164327, -0.263152, 0.072869, -0.508451, 0.225766, -0.377754, -0.153238, 0.123033, -0.026060, 0.076192, -0.012687, -0.193666, 0.094394, 0.401611, -0.433824, -0.031084, -0.055144, -0.196657, 0.087753, 0.259997, 0.196811, -0.020635, -0.110188, 0.058436, 0.166716, 0.148352, 0.151543, -0.379202, 0.049107, 0.020788, 0.008283, 0.214638, -0.046953, 0.134530, -0.246804, -0.223709, 1.317274, 0.218316, 0.436647, 0.152674, 0.233833, 0.093771, 0.375166, 0.329886, 0.246424, 0.602661, 0.643244, 0.146296, 0.374686, 0.263238, -0.062052, -0.433218, -0.221735, 0.132199, -0.051200, 0.079258, 0.498812, 0.404233, 0.234442, 1.478086, -0.528244, -0.108724, 0.002576, 0.088625, -0.428432, 0.196812, -0.211321, -0.502741, 0.044417, -0.286163, 0.471269, 0.126316, -0.485047, 0.048885, -0.032094, 1.084009, 0.413170, -0.133322, -0.372101, 0.322510, 0.395888, -0.585121, 0.268457, -0.226354, 0.065729, 0.559274, 0.040894, -0.581008, -0.109148, -0.134055, -0.138111, -0.521253, -0.092916, 0.139652, 0.219194, -0.156855, 0.326867, -0.013245, -0.169909, 0.062227, -0.175149, 0.203306, 0.210436, 0.098644, -0.038222, 0.512951, 0.656517, -0.806981, -0.227369, 0.031610, -0.076372, 0.053133, -0.179503, -0.475684, -0.143072, 0.443824, 0.083371, 0.182600, 0.257344, -0.120634, 0.605226, 0.456818, -0.070830, -0.221625, 0.084359, 0.034829, -0.006733, -0.123179, -0.121261, -0.059801, -0.215970, 0.713731, 1.072943, -0.295474, 0.171085, -1.083991, 0.062830, -0.013791, 0.025457, 0.070556, -0.284869, -0.556714, 0.576164, 0.225834, -0.381336, -0.293146, -0.261997, 0.651348, -0.350874, 0.396438, -0.060950, -0.057248, 0.379197, 0.381352, -0.007217, 0.283633, -0.011718, -0.039657, -0.063686, 0.215998, 0.254881, 0.346198, 0.179816, 0.019440, -0.379879, -0.128343, 0.505510, -0.113091, -0.140659, 0.349144, 0.215019, -0.452387, 0.197326, -0.057293, -0.033464, 0.314618, 0.201551, 0.448424, -0.049719, 0.356492, -0.028576, -0.073567, 0.062143, -0.559903, 0.134044, 0.774309, -0.894357, 0.407832, 0.009859, -0.116104, -0.300657, -0.249228, -0.247932, -0.015274, -0.165594, -0.521529, -0.067652, -1.087166, -0.128270, -0.113725, 0.305230, 0.264616, 0.138992, 0.063652, 0.260666, 0.393959, 0.228719, 0.202233, -0.026434, -0.323683, -0.256103, 0.539863, 0.057976, -0.094567, 0.675150, -0.407221, 0.087564, 0.060137, 0.045160, 0.238942, -0.119141, -0.337475, -0.459791, -0.381439, 0.023532, -0.130115, 0.057285, 0.833134, 0.305035, -0.281087, -0.077158, -0.158726, 0.238799, 0.789751, 0.271182, -0.503003, 0.342231, -0.287818, 0.046624, 0.142888, 0.610867, 0.070664, 0.061340, 0.072652, 0.404855, 1.221922, -0.302618, 0.140164, 0.175276, -0.048203, -0.499716, -0.066579, 0.196624, 0.183419, -0.376403, 0.522905, -0.170540, -0.609836, 0.030755, -0.103700, 0.051269, -0.020017, -0.302778, -0.586426, 0.077627, -0.041024, -0.223284, 0.107797, 0.387418, 0.100471, 0.117997, 0.176629, -0.667980, 0.013481, -0.054815, -0.356277, 0.037332, 0.046883, 0.099172, 0.193156, -0.076572, 1.225031, -0.034892, 0.093399, 0.068895, -0.143069, -0.099837, 0.016928, 0.071556, 0.966315, -0.220112, -0.361212, 0.170681, 0.055271, -0.099194, -0.014272, -0.310996, -0.240101, 0.385883, -0.012253, 0.191887, -0.259570, 0.124055, 0.186084, 0.028301, -0.178172, 0.359445, -0.122738, 0.111525, 0.501169, -0.206647, -0.356466, -0.148161, -0.091426, 0.157606, 0.190481, -0.002149, -1.258900, -0.001045, -0.520234, -0.345508, -0.170387, -0.026247, -0.215224, -0.451281, -0.039618, 0.487700, -0.380734, -0.957906, -0.154820, -0.443828, 0.688849, -0.015595, -0.049272, 0.384633, 0.180314, -0.813033, 0.331139, 0.240546, -0.136207, 0.094952, -0.092476, 0.090943, -0.184179, 0.124118, 0.135352, -0.336656, -0.655446, -0.468310, 0.285474, 0.177735, -0.224113, -0.888917, -0.362286, -0.005495, -0.647288, 0.252527, 0.045470, 0.295001, 0.106329, -0.147380, 0.036135, 0.250252, -0.153815, -0.177628, 0.092361, 0.167229, -0.126723, 0.237655, -1.075670, 0.054922, 0.281669, 0.023824, -0.173645, 0.161691, -0.264267, 0.468353, -0.061108, 0.153191, 0.321196, 0.270705, 0.095576, 1.599550, -0.002574, -0.908832, -0.564598, 0.274003, -0.128091, -0.184615, -0.181056, 0.402694, 0.322543, -0.799269, 0.028266, 0.036210, 0.021649, -0.593235, 0.370212, -0.025263, -0.252372, -0.275776, 0.332149, 0.334087, -0.096417, 0.142026, -0.570298, -0.200125, -0.256273, -0.399334, 0.158543, 0.068793, 0.004254, 0.172422, 0.169658, 0.163469, -0.119564, -0.125810, -0.203302, -0.359974, 0.061737, 0.243178, -0.216631, 0.075078, 1.100543, -0.213586, 0.008795, -0.120036, 0.259567, -0.625066, -0.096668, 0.367908, -0.040083, 0.243481, 0.127432, 0.264223, -0.518833, -0.516860, 0.330717, 0.106419, -0.125219, -0.292561, -0.134638, 0.045936, -0.421379, -0.286553, -0.016072, -0.266246, 0.266561, 0.094968, 0.171069, -0.327556, 0.136527, 0.256600, 0.023713, 0.017141, 0.127962, -0.464244, 0.012657, 0.012035, 0.293991, -0.716801, 0.137904, 0.097948, 0.009514, -0.122219, -0.017140, -0.042979, -0.739976, -0.324607, -0.324356, -0.072209, -0.174197, -0.055264, -0.575601, -0.263808, 0.247113, -0.091382, 0.018426, -0.206133, -0.113656, 0.203030, 0.026189, 0.029221, 0.013867, -0.216094, 0.217690, 0.064195, 0.077536, 0.053751, -0.003863, 0.176227, -0.323358, -0.526219, 0.285954, -0.163086, 0.090366, 0.139218, 0.304309, -0.053682, -0.125814, 0.024714, 0.474374, -0.074920, 1.228863, 0.246605, 0.078802, 0.188176, 0.344054, -0.000470, 0.074370, 0.380117, -0.573993, 0.190496, -0.192831, -0.127611, -0.175759, -0.263903, 0.305866, 0.052875, 0.151548, -0.044504, 0.128675, -0.025816, -0.161014, -0.205004, 0.377850, 0.170390, 0.260756, 0.058187, -0.057800, -0.420121, 0.200888, -0.041740, -0.066765, -0.027619, 0.252238, 0.283444, 0.166020, 0.167941, 0.408300, -0.250427, 0.214088, 0.142197, -0.318734, -0.106924, -0.469930, -0.063902, -0.134067, -0.798973, -0.173209, -0.215966, -0.090914, -0.300812, -0.168268, -0.000698, -0.019259, 0.077221, 0.493737, 0.044441, -0.039000, -0.428617, -0.204178, -0.966327, -0.066762, 0.211490, -0.822838, -0.813349, -0.155198, 0.085874, -0.087326, -0.070378, -0.468855, -0.249216, -0.142344, -0.037697, -0.094146, 0.044686, 0.354485, -0.018710, 0.626792, 0.259820, -0.054488, 0.047637, 0.144877, -0.225991, -0.001381, 0.852654, -0.923281, 0.129766, -0.095200, 0.864131, 0.214344, 0.689934, 0.725649, -0.283523, -0.280090, 0.161981, -0.107594, -0.207952, -0.010664, 0.473192, 0.336459, 0.165275, -0.096289, 0.184810, 0.120286, 0.976175, 0.148137, -0.338711, 0.148385, -0.251427, 0.227102, -0.015786, -0.064139, 0.195432, 0.365726, -0.026167, 0.162749, -1.241678, -0.228596, 0.183980, -0.086688, -0.229278, -0.527284, -0.674857, 0.015005, -1.017693, -0.067413, -0.157864, 0.188432, 0.188667, -0.114507, 0.039521, 1.148907, -0.558882, -0.383965, -0.716390, -0.023319, 0.132745, 0.505750, 0.013945, -0.485155, 0.061453, 0.430911, -0.028953, -0.241727, -0.084003, 0.028785, 0.259215, -0.048618, -0.010518, 0.058234, 0.179795, 0.178784, 0.611145, 0.088005, 0.080518, 0.074309, -0.252476, -0.334212, 0.126415, 0.477005, 0.270039, 0.267491, -0.292934, 0.076230, 0.717683, -0.284877, -0.900730, -0.435190, 0.538019, 0.341035, 0.091501, 0.059673, -1.213075, 0.068276, -0.680235, 0.263085, -0.132909, 0.539403, -0.046652, 0.224431, -0.171544, -0.318285, -0.130809, 0.005064, 0.222876, 0.646166, -0.209296, -0.282729, -0.040990, -0.427449, -0.399005, -0.032286, 0.020056, -0.147797, -0.070652, -0.588356, -1.585942, -0.133431, -0.102346, 0.313169, 0.802080, 0.287512, 0.081780, -0.085307, -0.417264, -0.379300, -0.095259, -0.199464, -1.271843, -0.567615, -0.326608, -0.155961, 0.316661, 0.120621, 0.039752, 0.202797, 0.839040, -0.357084, 0.541035, 0.253120, -0.414911, -0.412126, 0.623884, -0.408105, -0.094865, -0.753080, 0.665202, 0.820046, 0.022749, -0.582662, -0.082433, 0.048993, -0.052425, 0.073131, 0.302512, 0.562435, 0.250389, -0.146315, 0.240401, 0.168972, 1.049728, -0.204858, 0.220421, -0.010313, 0.284536, -0.001473, -0.209537, -0.367211, 0.080701, 0.101228, 0.502422, -1.076459, -0.650064, 0.088902, -0.174144, 1.195094, 0.032703, -1.425459, -0.044354, -0.360235, -0.403236, -0.131340, 0.110569, 0.719565, 0.291751, -0.235356, 0.140062, -0.467918, -0.111634, 0.123189, 0.139553, 0.150578, -0.569667, 0.363761, 0.246514, 0.804322, -0.048713, 0.006697, 0.436412, 0.519664, -0.065189, -0.234177, -0.072198, -0.173131, 0.426250, 0.146914, -0.120961, 1.170495, -0.053718, 0.608427, -0.025796, 0.204474, -1.437743, 0.166368, -0.636026, 0.327199, -0.081735, -0.619501, 0.222895, -0.057753, -0.743749, -0.036166, -0.230675, 0.934421, 0.007834, -0.286742, -0.671336, -0.489892, 0.230261, -0.050039, -0.258344, 0.037668, -0.100224, -0.168757, -0.045503, 0.022316, -0.053320, -0.639747, -0.258264, -0.114150, 0.029167, -0.848038, -0.617300, -0.040946, -0.329084, -0.146901, -0.100122, 0.151232, 0.239329, 0.289698, 0.017279, -0.079821, 0.490416, 0.116854, 0.039283, 0.119156, -0.175840, 0.304942, -0.479099, 0.020200, -0.101487, -0.254372, -0.095817, -0.077767, -0.228563, -0.101068, 0.059597, 0.107369, -0.025661, -0.427382, 0.340923, 0.249844, -0.096504, 0.179853, 0.319719, -0.080618, -0.100007, -0.035735, 0.182126, 0.547036, -0.227398, 0.015816, 0.506530, 0.205497, -0.052041, 0.688823, -0.209111, -0.444715, 0.183070, 0.821251, -0.564196, 0.012051, -0.090867, 0.139703, 0.168173, -0.282839, 0.635237, 0.250715, -0.205814, -0.069491, -0.020716, -2.072096, 0.108939, -0.082157, 0.070295, -0.090816, -0.298019, -0.085238, -0.139388, -0.076973, -0.002143, 0.498146, 0.114504, 0.142360, 0.618416, -0.239029, 0.126704, -0.375672, -0.035453, -0.503699, -0.175617, 0.042817, 0.339536, 0.244432, -0.132627, 0.453895, -0.226618, -0.127015, -0.018250, 0.585148, -0.890271, -0.353414, -1.850411, 0.101173, -0.062011, -0.526002, -0.340272, -0.282551, 0.202432, -0.064553, -0.012657, -0.192560, -0.354973, 0.090610, 0.017248, -0.220339, -0.259174, -0.051594, 0.325522, 0.083337, 0.013002, -0.488795, 0.302172, 0.023064, -0.162356, -0.192784, 0.162681, -0.739975, 0.336299, -0.036604, -0.105974, 0.220118, -0.002185, -0.308987, -0.296642, -0.373628, 0.183745, 0.156648, 0.013544, -0.423119, 0.045376, 0.259059, -0.153448, -0.096556, -0.046734, 0.223250, -0.239963, -0.334878, -0.065386, -0.093594, 0.325077, -0.011895, -0.004536, -0.151601, 0.137547, -0.453023, 0.501568, -0.055585, -0.754044, -0.565085, 0.038533, -0.455213, 0.266524, 0.190745, -0.014292, 0.483060, -0.122350, 0.558962, -0.108771, 0.070163, 0.052512, -0.073699, -0.192545, -0.474469, 0.509467, -0.983989, -0.064818, 0.152327, -0.007647, 0.069389, 0.234809, -0.103839, 0.002097, -0.292852, -0.154656, -0.205277]
RESULT_STATE = [-0.023136, -0.067960, 0.296610, -0.071614, 0.374989, -0.106345, -0.031627, -0.135678, 0.181303, -0.297255, -0.211941, 0.254588, -0.371835, -0.212625, 0.152666, 0.090540, 0.121103, 0.193535, -0.058452, -0.164859, 0.100465, -0.017713, -0.039659, -0.173603, -0.216271, -0.125562, -0.154849, -0.162001, -0.258929, 0.146301, -0.074437, -0.066600, 0.132684, -0.038081, -0.210826, 0.157837, -0.175417, -0.139826, -0.147963, 0.159223, 0.006948, 0.026433, 0.070319, -0.227952, 0.082153, -0.244522, -0.110949, 0.097147, 0.010971, -0.354221, 0.013621, -0.073785, 0.148227, 0.016585, -0.261723, 0.176789, 0.142053, -0.216574, -0.003596, -0.045528, -0.043922, 0.199602, 0.359113, -0.047997, -0.197802, 0.147701, 0.061544, -0.334807, -0.081978, -0.084081, 0.249236, 0.038469, -0.006223, -0.007925, 0.055987, -0.095980, 0.015193, -0.128562, -0.064609, -0.044584, -0.346949, -0.095916, 0.129793, -0.313563, 0.116305, -0.339039, -0.096001, 0.143179, 0.231493, 0.135298, -0.268034, -0.232960, -0.296416, 0.095833, 0.109371, -0.020593, -0.283867, -0.080605, 0.028533, 0.036208, 0.175011, 0.003853, 0.115817, 0.003561, -0.013217, -0.059094, 0.091770, 0.203966, 0.044908, -0.210102, -0.002290, 0.007713, -0.019595, -0.063916, -0.127802, 0.075419, 0.145996, 0.036009, -0.104815, -0.111968, 0.087206, -0.109915, -0.045023, 0.162142, 0.096329, 0.007566, 0.105200, 0.392825, -0.076885, -0.015008, 0.135899, -0.172717, -0.065356, -0.051072, -0.228519, -0.124311, -0.348249, -0.040611, -0.104311, -0.201439, 0.152081, -0.086352, 0.257897, -0.181688, 0.016445, 0.054978, 0.093177, -0.090239, 0.082755, -0.331595, -0.033892, -0.317476, -0.095726, -0.134715, 0.252238, -0.153223, -0.262548, -0.109043, -0.297001, -0.133159, -0.042924, -0.022013, -0.025568, 0.078414, -0.079922, -0.210045, 0.020890, 0.321022, 0.077040, -0.162644, -0.101529, 0.087227, 0.158901, -0.146720, -0.364140, 0.271716, -0.067893, -0.111495, 0.166566, 0.146865, -0.118764, -0.216862, 0.372532, -0.131408, -0.132477, 0.277567, -0.138198, -0.361929, -0.117806, -0.064255, -0.021694, -0.123746, -0.095737, -0.062750, -0.078527, -0.134846, -0.315326, 0.154445, 0.005819, 0.221617, -0.121341, 0.147358, -0.133945, 0.017769, 0.299038, 0.133233, 0.043244, -0.146939, -0.282493, 0.073423, 0.018879, 0.181482, 0.245813, 0.032871, 0.039481, 0.015423, 0.093995, -0.207344, 0.345394, -0.132721, 0.131803, 0.215796, 0.305560, -0.073636, 0.087133, -0.161088, 0.453305, -0.011318, -0.041551, 0.085185, 0.215358, 0.146273, -0.384782, 0.067188, 0.286155, -0.212564, -0.025541, 0.268522, -0.019126, 0.081502, -0.161852, -0.029205, 0.343246, -0.040668, -0.091564, 0.016202, -0.154037, 0.008106, 0.088722, -0.033817, -0.197389, -0.050963, -0.027104, -0.104414, 0.207142, -0.057430, -0.178898, 0.077203, 0.179352, -0.324286, -0.108853, 0.045126, -0.194598, -0.036639, -0.036066, -0.082685, -0.313953, 0.150834, 0.012467, -0.106108, 0.113175, 0.113700, -0.298670, 0.123011, -0.102309, -0.172589, 0.193821, -0.335379, -0.164182, -0.086744, -0.110596, 0.009929, -0.056012, -0.043356, 0.099912, 0.114657, 0.066258, -0.093128, -0.148610, -0.310196, -0.026585, 0.076574, -0.033724, 0.237945, -0.009374, 0.122189, -0.151694, -0.307796, 0.161762, 0.263377, 0.111424, 0.286966, -0.215450, 0.076763, -0.127455, -0.041372, -0.096108, 0.439031, -0.295186, -0.050794, 0.198668, -0.361971, 0.017444, -0.088390, 0.241140, 0.075781, -0.167220, 0.253229, 0.109508, 0.363597, 0.106263, 0.167114, -0.123350, -0.062347, -0.012845, 0.088972, -0.139556, -0.068588, 0.104293, 0.137438, 0.149063, 0.115726, -0.132083, -0.141097, -0.329596, -0.087574, -0.093325, -0.103415, -0.331707, -0.160636, -0.194135, -0.138261, -0.104790, 0.100681, 0.153542, -0.022203, -0.316029, -0.236407, -0.281207, 0.173891, -0.265330, 0.063209, -0.225719, -0.063404, -0.181805, -0.154263, -0.004223, -0.073833, 0.073559, 0.114777, -0.246222, -0.260784, -0.119003, -0.274741, -0.115524, -0.037147, -0.439913, 0.108001, 0.279107, 0.033002, 0.028773, -0.146293, 0.103721, -0.015812, -0.117302, -0.083788, 0.030891, 0.134267, -0.034123, 0.228210, 0.039211, -0.176764, 0.061539, 0.095756, -0.117271, 0.281320, 0.260006, -0.157986, 0.060596, -0.002258, -0.093877, 0.063328, -0.093763, 0.151194, -0.176500, 0.015459, 0.060667, -0.037449, -0.155395, -0.127635, 0.124873, -0.255174, 0.001227, -0.184224, 0.130804, 0.286926, -0.065299, -0.336916, 0.000223, -0.286515, 0.163527, -0.015642, 0.030920, 0.102439, -0.270914, 0.321016, -0.078311, -0.014768, 0.021413, -0.161370, 0.168885, 0.047300, 0.182337, -0.119218, 0.129043, -0.069417, -0.158101, 0.191512, 0.004727, -0.167299, 0.052305, -0.023348, -0.325292, 0.128763, -0.025761, 0.045725, -0.232916, 0.223351, 0.190073, 0.299908, 0.318943, -0.252097, -0.130592, 0.197406, -0.003167, 0.184851, -0.113696, 0.136350, 0.023792, 0.131108, 0.001273, 0.045888, -0.258520, -0.065158, -0.046514, -0.030819, 0.251937, -0.095951, -0.079873, 0.037761, -0.018316, -0.030862, 0.113680, -0.058534, 0.027974, -0.151713, 0.059606, -0.289090, 0.128054, -0.144407, -0.146846, 0.046876, 0.001750, -0.007746, -0.202185, 0.112454, -0.004454, -0.265402, -0.086426, -0.242262, 0.075242, 0.239916, -0.017009, -0.230973, -0.317069, -0.232395, -0.017760, -0.091537, -0.065176, -0.084245, -0.091657, -0.244345, -0.040460, 0.017838, 0.028843, -0.072877, -0.078437, 0.002487, -0.115060, 0.096064, 0.012090, 0.053814, -0.100841, 0.259037, 0.061109, 0.001472, -0.145424, 0.055270, -0.174781, 0.120406, -0.159918, -0.023046, -0.110667, -0.166807, -0.334376, -0.090039, -0.303673, 0.045002, 0.067254, 0.248857, -0.160479, -0.058017, 0.399449, -0.084934, 0.176348, 0.158512, -0.078946, 0.081382, 0.048820, 0.257044, -0.003994, 0.189060, 0.065808, 0.052481, 0.058463, 0.174373, 0.192994, -0.097645, 0.016310, 0.234717, -0.084944, -0.111961, 0.013733, 0.159888, -0.022615, 0.133942, 0.028007, 0.044783, 0.110585, 0.357760, 0.201500, -0.139305, 0.051986, 0.037336, -0.185767, -0.076451, -0.028506, 0.011306, -0.143764, -0.085860, 0.014458, 0.197047, -0.128895, -0.008106, -0.286860, -0.009722, 0.234753, -0.130933, 0.071673, -0.167442, -0.027025, -0.025852, 0.089891, -0.399433, 0.159440, 0.024400, -0.267796, 0.258893, -0.085198, 0.206916, -0.158337, 0.020216, 0.109092, -0.113309, -0.128577, 0.197172, 0.066519, 0.339921, -0.041388, 0.129766, -0.159244, -0.020842, 0.129994, 0.327382, 0.034703, -0.106349, -0.111933, 0.120095, 0.025059, 0.122711, 0.109070, -0.096992, -0.109395, -0.043843, 0.055651, -0.143190, -0.034877, -0.071296, -0.174558, -0.124823, 0.096530, -0.108562, -0.121571, 0.181763, -0.329454, 0.043943, -0.114681, -0.204279, 0.049482, -0.232314, -0.173515, -0.067034, 0.099927, -0.122958, 0.085391, 0.040385, -0.167511, -0.230442, -0.119164, -0.115658, -0.193615, -0.149210, 0.010833, 0.031297, -0.251002, -0.120899, 0.119544, 0.035311, -0.002809, -0.034277, -0.242400, -0.277594, 0.235091, -0.132339, -0.174749, 0.384340, 0.284630, -0.069193, -0.016874, -0.108572, -0.179884, -0.143050, 0.128957, 0.097775, 0.063055, -0.022487, 0.212169, 0.052258, 0.404870, -0.271189, 0.002020, -0.127259, 0.134273, -0.179289, -0.108964, -0.214898, -0.038984, 0.120638, -0.112134, -0.142572, -0.418990, -0.069834, 0.040472, -0.147181, -0.162475, 0.082006, -0.099211, -0.003153, 0.172775, -0.001623, -0.005925, 0.253876, -0.110238, 0.006887, -0.172401, -0.044768, 0.141029, 0.098822, -0.100502, 0.022829, -0.132888, 0.014075, 0.058885, -0.068230, 0.139103, -0.300430, -0.092780, 0.071060, -0.035924, 0.092631, -0.176610, 0.154560, 0.145167, 0.327644, -0.284048, -0.117396, 0.142652, 0.149117, 0.056814, -0.035025, 0.152052, 0.060749, -0.072364, 0.113336, -0.096621, -0.337784, -0.162591, -0.096959, -0.202147, 0.207536, 0.102567, 0.055174, -0.187567, -0.097542, -0.251762, 0.235016, 0.168325, -0.180267, 0.107851, -0.124946, -0.068469, -0.228349, 0.063726, -0.119115, 0.211353, -0.223928, -0.126542, 0.056676, 0.176260, -0.185219, -0.081115, 0.078522, -0.100839, 0.417488, -0.249039, 0.340747, 0.197283, 0.029006, 0.047110, -0.018699, -0.125810, 0.067481, -0.061048, -0.007881, 0.143203, 0.155457, -0.082776, 0.089852, 0.305493, -0.129906, 0.082127, 0.137506, -0.015695, -0.016634, -0.096159, -0.275264, 0.147934, 0.169254, 0.192580, -0.070358, 0.450822, -0.259151, -0.085935, 0.072948, 0.014186, 0.013239, -0.059613, 0.108981, -0.040014, 0.189916, -0.167747, -0.198949, 0.133056, 0.299362, -0.138925, 0.115751, 0.002785, 0.146153, -0.186305, -0.101360, -0.346362, 0.523548, -0.215400, -0.048275, 0.069892, -0.018309, -0.134057, 0.152294, 0.082381, -0.324199, -0.012031, -0.053575, -0.283081, -0.047177, 0.101785, -0.186885, 0.075028, -0.155888, 0.200149, 0.098605, -0.063689, -0.178210, 0.057302, -0.057082, -0.073382, 0.041585, -0.011242, -0.205963, -0.081599, -0.195460, 0.107151, -0.317846, -0.028562, 0.128156, 0.044546, 0.074931, 0.159101, -0.281107, -0.053231, -0.218566, 0.104304, -0.085796, -0.184491, 0.332109, 0.531283, 0.071502, -0.061075, 0.268188, 0.336941, -0.070930, -0.099721, -0.023610, -0.016100, -0.176578, 0.021855, -0.021633, 0.214496, -0.065633, 0.248988, 0.128826, -0.060658, -0.249949, 0.269360, -0.032089, 0.072209, -0.029517, -0.124962, 0.099856, -0.145695, -0.233129, -0.167261, -0.105012, -0.281161, 0.024650, -0.309893, 0.103506, 0.133241, 0.012853, -0.011294, -0.173083, -0.251629, 0.087422, -0.174798, -0.028644, -0.270711, -0.061096, 0.023846, -0.069264, 0.119058, 0.328422, 0.003193, 0.024518, -0.239106, 0.116935, -0.283134, -0.195831, -0.250889, -0.001733, -0.074653, 0.042549, 0.026683, -0.297206, 0.137551, 0.003158, 0.262297, 0.284267, 0.143732, 0.087101, 0.032541, 0.338510, -0.047892, 0.018936, -0.015697, 0.109402, -0.204452, -0.059335, 0.016434, -0.120136, 0.020077, -0.248690, -0.073099, 0.057575, 0.012539, -0.068009, 0.083131, -0.251393, 0.152683, 0.041472, -0.147054, 0.094649, -0.248211, -0.066727, 0.356129, 0.395610, -0.215326, -0.042653, 0.034823, -0.064882, 0.025721, -0.131669, 0.031420, -0.080852, -0.103698, -0.118161, -0.214438, -0.203584, 0.018869, -0.075657, -0.132882, -0.059367, 0.232729, -0.315690, 0.082274, 0.133974, -0.116263, 0.048839, 0.003063, -0.152667, 0.080400, 0.067179, 0.319356, -0.088041, 0.118763, -0.222307, 0.178516, -0.025777, 0.184336, -0.145983, 0.056378, -0.050526, -0.104419, 0.136253, 0.177186, 0.155150, -0.064634, 0.027689, 0.047058, -0.136604, -0.187792, -0.023652, -0.285923, 0.009747, 0.222730, -0.232682, -0.036203, 0.217416, 0.108941, 0.295442, -0.032191, 0.128009, -0.243749, -0.120079, -0.073101, 0.023524, 0.072224, 0.146762, -0.013125, -0.166369, -0.163670, 0.189265, 0.024396, 0.161398, -0.138184, 0.025409, 0.099562, 0.098046, -0.170776, 0.082445, 0.312777, -0.107021, 0.094835, 0.327919, -0.036570, -0.201622, -0.112571, -0.073399, -0.138833, 0.021475, -0.249052, -0.253698, -0.032697, -0.173221, 0.008841, -0.113342, 0.252625, -0.312055, -0.130929, -0.018985, 0.040285, 0.318593, -0.050434, 0.067773, -0.094240, -0.232762]

if not os.path.exists(LOG_PATH):
    os.makedirs(LOG_PATH)
if not os.path.exists(FREEZE_DIR):
    os.makedirs(FREEZE_DIR)


def export_net(batch_size=64):
    print("="*50+"\nStart export\n"+"="*50)
    print("Log path: "+LOG_PATH)
    print("Load directory: "+LOAD_FILE)

    with tf.Session(graph=tf.get_default_graph()) as sess:
        network = CombLSTMInterference(embedding_size=512, batch_size=batch_size, comb_features=1024,
                                       embedding_net_type=NetType.DILATED_DENSE_BLOCK, use_conversion=False)
        # combined_network = CombLSTMNetwork(num_proof=1, num_train_clauses=32,
        #                                    num_shuffles=1, num_init_clauses=32,
        #                                    weight0=1, weight1=1, embedding_net_type=NetType.DILATED_DENSE_BLOCK,
        #                                    wavenet_blocks=1, wavenet_layers=1,
        #                                    embedding_size=512, comb_features=1024, dropout_rate_embedder=0.0,
        #                                    dropout_rate_fc=0.0, use_conversion=False)

        init_op = initialize_tf_variables()
        sess.run(init_op)
        saver = tf.train.Saver(var_list=tf.trainable_variables())

        print("DilConv3: "+str(tf.get_default_graph().get_tensor_by_name('CombLSTMNet/NegConjectureEmbedder/DilatedDenseBlock/DilConv3/w:0').eval()))
        graph = tf.get_default_graph()

        chkp.print_tensors_in_checkpoint_file(LOAD_FILE, tensor_name='', all_tensors=True)
        saver.restore(sess, LOAD_FILE)

        print("DilConv3: "+str(tf.get_default_graph().get_tensor_by_name('CombLSTMNet/NegConjectureEmbedder/DilatedDenseBlock/DilConv3/w:0').eval()))
        # print("Test graph...")
        # test_graph(tf.get_default_graph(), prefix="", sess=sess)

        freeze_graph(model_folder=FREEZE_DIR, output_node_names='CombLSTMNet/NegConjFeatures,CombLSTMNet/InitialClauses/LSTM_INITIAL/FinalState/InitStateFeatures,CombLSTMNet/CombNetwork/FinalWeights',
                     file_name='embedder_network_'+str(batch_size)+'.pb', sess=sess)
        #writer = create_summary_writer(logpath=LOG_PATH, sess=sess)


def export_net_full():
    print("="*50+"\nStart export\n"+"="*50)
    print("Log path: "+LOG_PATH)
    print("Load directory: "+LOAD_FILE)

    with tf.Session(graph=tf.get_default_graph()) as sess:
        # network = CombLSTMInterference(embedding_size=512, batch_size=32, comb_features=1024,
        #                                embedding_net_type=NetType.DILATED_DENSE_BLOCK, use_conversion=False)
        combined_network = CombLSTMNetwork(num_proof=1, num_train_clauses=32,
                                           num_shuffles=1, num_init_clauses=32,
                                           weight0=1, weight1=1, embedding_net_type=NetType.DILATED_DENSE_BLOCK,
                                           wavenet_blocks=1, wavenet_layers=1,
                                           embedding_size=512, comb_features=1024, dropout_rate_embedder=0.0,
                                           dropout_rate_fc=0.0, use_conversion=False)

        init_op = initialize_tf_variables()
        sess.run(init_op)
        saver = tf.train.Saver(var_list=tf.trainable_variables())

        print("DilConv3: "+str(tf.get_default_graph().get_tensor_by_name('CombLSTMNet/NegConjectureEmbedder/DilatedDenseBlock/DilConv3/w:0').eval()))
        print("Vocabs: "+str(tf.get_default_graph().get_tensor_by_name('CombLSTMNet/Vocabulary/Vocabs:0').eval()))
        print("Arities: "+str(tf.get_default_graph().get_tensor_by_name('CombLSTMNet/Vocabulary/Arities:0').eval()))
        graph = tf.get_default_graph()

        # chkp.print_tensors_in_checkpoint_file(LOAD_FILE, tensor_name='', all_tensors=True)
        saver.restore(sess, LOAD_FILE)

        print("DilConv3: "+str(tf.get_default_graph().get_tensor_by_name('CombLSTMNet/NegConjectureEmbedder/DilatedDenseBlock/DilConv3/w:0').eval()))
        print("Vocabs: "+str(tf.get_default_graph().get_tensor_by_name('CombLSTMNet/Vocabulary/Vocabs:0').eval()))
        print("Arities: "+str(tf.get_default_graph().get_tensor_by_name('CombLSTMNet/Vocabulary/Arities:0').eval()))
        print("Test graph...")
        test_graph_full(tf.get_default_graph(), prefix="", sess=sess)
        print("Vocabs: "+str(tf.get_default_graph().get_tensor_by_name('CombLSTMNet/Vocabulary/Vocabs:0').eval()))
        print("Arities: "+str(tf.get_default_graph().get_tensor_by_name('CombLSTMNet/Vocabulary/Arities:0').eval()))

        freeze_graph(model_folder=FREEZE_DIR, output_node_names='CombLSTMNet/NegConjFeatures,CombLSTMNet/InitialClauses/LSTM_INITIAL/FinalState/InitStateFeatures,CombLSTMNet/CombNetwork/FinalWeights',
                     file_name='embedder_network_full.pb', sess=sess)
        #writer = create_summary_writer(logpath=LOG_PATH, sess=sess)


def import_net():
    print("="*50+"\nStart import\n"+"="*50)
    print("Freeze directory: "+FREEZE_DIR)
    net_file = os.path.join(FREEZE_DIR, 'embedder_network.pb')
    graph = load_frozen_graph(net_file)
    for op in graph.get_operations():
        print(op.name)
    test_graph(graph, prefix='prefix/')


def test_graph(graph, prefix='prefix/', sess=None):
    input_batch_data = graph.get_tensor_by_name(prefix+'CombLSTMNet/ClauseEmbedder/InputClause:0')
    input_batch_length = graph.get_tensor_by_name(prefix+'CombLSTMNet/ClauseEmbedder/InputClauseLength:0')
    input_conj_data = graph.get_tensor_by_name(prefix+'CombLSTMNet/NegConjectureEmbedder/InputClause:0')
    input_conj_length = graph.get_tensor_by_name(prefix+'CombLSTMNet/NegConjectureEmbedder/InputClauseLength:0')
    input_init_length = graph.get_tensor_by_name(prefix+'CombLSTMNet/InitialClauses/InitClausesLength:0')
    input_state_features = graph.get_tensor_by_name(prefix+'CombLSTMNet/CombNetwork/InitStateFeaturesPlaceholder:0')
    input_conj_features = graph.get_tensor_by_name(prefix+'CombLSTMNet/CombNetwork/NegConjFeaturesPlaceholder:0')

    output_state = graph.get_tensor_by_name(prefix+'CombLSTMNet/InitialClauses/LSTM_INITIAL/FinalState/InitStateFeatures:0')
    output_conj = graph.get_tensor_by_name(prefix+'CombLSTMNet/NegConjFeatures:0')
    output_weights = graph.get_tensor_by_name(prefix+'CombLSTMNet/CombNetwork/FinalWeights:0')

    feed_dict = {
        input_batch_data: INIT_INPUT,
        input_conj_data: INPUT_NEG_CONJ,
        input_batch_length: INPUT_CLAUSE_LENGTH,
        input_conj_length: INPUT_CONJ_LENGTH,
        input_init_length: INPUT_INIT_LENGTH
    }
    if not sess:
        sess = tf.Session(graph=graph)

    state_data, conj_data = sess.run([output_state, output_conj], feed_dict=feed_dict)
    print("State data: "+str(state_data))
    print("Conj data: "+str(conj_data))
    feed_dict = {
        input_batch_data: INIT_INPUT,
        input_batch_length: INPUT_CLAUSE_LENGTH,
        input_conj_features: conj_data,
        input_state_features: state_data
    }
    final_weights = sess.run([output_weights], feed_dict=feed_dict)
    print("Weights: "+str(final_weights))
    writer = create_summary_writer(logpath=LOG_PATH, sess=sess)


def import_net_full():
    print("="*50+"\nStart import\n"+"="*50)
    print("Freeze directory: "+FREEZE_DIR)
    net_file = os.path.join(FREEZE_DIR, 'embedder_network_full.pb')
    graph = load_frozen_graph(net_file)
    for op in graph.get_operations():
        print(op.name)
    test_graph_full(graph, prefix='prefix/')


def test_graph_full(graph, prefix='prefix/', sess=None):
    input_batch_data = graph.get_tensor_by_name(prefix+'CombLSTMNet/ClauseEmbedder/InputClause:0')
    input_batch_length = graph.get_tensor_by_name(prefix+'CombLSTMNet/ClauseEmbedder/InputClauseLength:0')
    input_conj_data = graph.get_tensor_by_name(prefix+'CombLSTMNet/NegConjectureEmbedder/InputClause:0')
    input_conj_length = graph.get_tensor_by_name(prefix+'CombLSTMNet/NegConjectureEmbedder/InputClauseLength:0')
    input_init_length = graph.get_tensor_by_name(prefix+'CombLSTMNet/InitialClauses/InitClausesLength:0')

    output_state = graph.get_tensor_by_name(prefix+'CombLSTMNet/InitialClauses/LSTM_INITIAL/FinalState/InitStateFeatures:0')
    output_conj = graph.get_tensor_by_name(prefix+'CombLSTMNet/NegConjFeatures:0')
    output_weights = graph.get_tensor_by_name(prefix+'CombLSTMNet/CombNetwork/FinalWeights:0')

    feed_dict = {
        input_batch_data: INIT_INPUT + INIT_INPUT,
        input_conj_data: INPUT_NEG_CONJ,
        input_batch_length: INPUT_CLAUSE_LENGTH + INPUT_CLAUSE_LENGTH,
        input_conj_length: INPUT_CONJ_LENGTH,
        input_init_length: INPUT_INIT_LENGTH
    }
    if not sess:
        sess = tf.Session(graph=graph)
    # with sess:
    print("DilConv3: " + str(graph.get_tensor_by_name(prefix+'CombLSTMNet/NegConjectureEmbedder/DilatedDenseBlock/DilConv3/w:0').eval()))
    state_data, conj_data, final_weights = sess.run([output_state, output_conj, output_weights], feed_dict=feed_dict)
    print("State data: "+str(state_data))
    print("Conj data: "+str(conj_data))
    print("Weights: "+str(final_weights))
    writer = create_summary_writer(logpath=LOG_PATH, sess=sess)


if __name__ == "__main__":
    export_net(batch_size=256)
    #export_net_full()
    #import_net()
    #import_net_full()
